import huffman
import numpy

data = [('g', 0.9953106682297774), ('"', 0.003516998827667058), ('t', 0.0008293591625976473), ('e', 0.00011457752383553957), (' ', 0.00010243685905826385), ('i', 5.008024220626233e-05), ('c', 2.655770420029063e-05), ('s', 2.0487371811652774e-05), ('d', 9.86429013153652e-06), ('.', 5.311540840058125e-06), (',', 4.552749291478393e-06), ('\n', 3.793957742898661e-06), ('b', 3.0351661943189297e-06), ('f', 7.587915485797324e-07), ('j', 7.587915485797324e-07), ('k', 1.8811752554562163e-07), ('a', 1.4292281682048578e-07), ('u', 1.1117026422742412e-07), ('n', 8.297806650177671e-08), ('v', 5.9581448801626e-08), ('l', 5.347798331463016e-08), ('q', 3.945454475522308e-08), ('o', 2.8773480152980364e-08), ('h', 1.9254980405403524e-08), ('y', 1.14803279398255e-08), ('?', 8.137953982661113e-09), ('m', 5.885484576745983e-09), ('w', 4.940900632329962e-09), ('r', 8.71923640999405e-10), ('p', 7.992633375827879e-10), ('x', 5.812824273329366e-10), ('z', 2.906412136664683e-10), ('1', 2.2357016435882185e-11), ('2', 2.2357016435882185e-11), ('3', 1.6767762326911638e-11), ('5', 5.589254108970546e-12), ('0', 2.6132511857165096e-12), ('8', 7.378349789006897e-13), ('4', 7.090614699742006e-13), ('7', 5.693044266169668e-13), ('6', 4.860667757939084e-13), ('9', 4.737352719682701e-13)]
data = [(' ', 0.8485385296722765), ('\n', 0.05137289636846768), (',', 0.03985828166519044), ('.', 0.02568644818423384), ('?', 0.02568644818423384), ('s', 0.0035429583702391502), ('o', 0.0017714791851195751), ('"', 0.0017714791851195751), ('t', 0.0008857395925597876), ('a', 0.0004428697962798939), ('b', 0.00022143489813994694), ('l', 6.751783532931007e-05), ('e', 4.5011890219540045e-05), ('i', 2.7900628581774817e-05), ('u', 2.5961914209023097e-05), ('r', 1.7785597071765825e-05), ('d', 8.176317137257274e-06), ('p', 6.4061866230057006e-06), ('m', 5.900435047505249e-06), ('h', 3.1188013822527744e-06), ('g', 2.86592559450255e-06), ('w', 2.781633665252475e-06), ('c', 2.6973417360024e-06), ('n', 2.275882089752025e-06), ('y', 1.1800870095010498e-06), ('f', 8.4291929250075e-07), ('k', 5.900435047505249e-07), ('j', 1.6858385850015e-07), ('q', 8.4291929250075e-08), ('v', 8.4291929250075e-08), ('z', 7.78079346923769e-08), ('x', 4.242365892240019e-09), ('0', 6.934433373585092e-10), ('1', 3.8352452736587927e-10), ('2', 2.542742963803167e-10), ('5', 1.7820331574576213e-10), ('3', 1.676379017687406e-10), ('8', 1.6376391664383277e-10), ('4', 1.260806067924562e-10), ('7', 1.0530195930431396e-10), ('9', 9.332782346368962e-11), ('6', 7.607098063455457e-11)]
data = [('t', 0.4781931464174454), ('o', 0.14174454828660435), ('a', 0.08099688473520247), ('s', 0.05295950155763239), ('i', 0.04439252336448597), ('w', 0.03738317757009345), ('f', 0.02258566978193146), ('h', 0.02258566978193146), ('u', 0.021028037383177565), ('b', 0.01947040498442367), ('d', 0.018691588785046724), ('m', 0.013239875389408098), ('n', 0.013239875389408098), ('r', 0.006230529595015575), ('e', 0.005451713395638628), ('g', 0.005451713395638628), ('c', 0.0031152647975077876), ('l', 0.0031152647975077876), ('j', 0.0023364485981308405), ('p', 0.0023364485981308405), ('v', 0.0015576323987538938), ('q', 0.0007788161993769469), ('y', 0.0007788161993769469), (' ', 0.0007788161993769469), ('"', 0.0007788161993769469), ('k', 0.000659830391138802), ('3', 3.2450674974039446e-05), ('4', 3.2450674974039446e-05), ('z', 2.1633783316026295e-05), ('1', 1.0816891658013147e-05), ('.', 1.0816891658013147e-05), ('x', 5.001941310720468e-06), ('2', 1.9744505173896587e-06), ('5', 1.0220685031193528e-06), ('6', 5.962066268196224e-07), ('\n', 5.962066268196224e-07), ('7', 5.807207404087232e-07), ('8', 5.187771947651261e-07), ('9', 4.800624787378778e-07), (',', 2.3228829616348928e-08), ('0', 1.5485886410899283e-08), ('?', 7.742943205449642e-09)]

depth = 8
if 2**depth < len(data):
    raise ValueError("insufficient depth")

symb = [char for (char, value) in data]
valu = numpy.array([value for (char, value) in data])*2**depth
print(valu)
mask = (valu > 1.0)
#mask[mask < 1.0] = 1.0
#mask[mask > 1.0] = 0.0
current = valu[mask].sum()/(2**depth)
new_total = 1 - len(valu[numpy.invert(mask)])/(2**depth)

valu = new_total*valu/current
valu[numpy.invert(mask)] = 1.0
valu = numpy.round(valu).astype(int)
if any(valu == 0):
    raise ValueError("all symbols must be non zero")

def bits(number):
    bit = 1
    while (number >= bit):
       if number & bit:
           yield bit
       bit = bit << 1

new_data = []
for ((symbol, value), num) in zip(data, valu):
    sub_data = []
    for bit in bits(num):
        sub_data.append((symbol + "_" + str(bit), value*bit/num))
    new_data += sub_data

data = dict(data)
huff = huffman.Huffman(data, data.keys(), dataIsWeights=True)

data = dict(new_data)
huff = huffman.Huffman(data, data.keys(), dataIsWeights=True)
